#connect cluster('kvc43f0ee6600e24ef2b0e.southcentralus').database('KustoDetectiveAgency')

// triple trouble!

.execute database script <|
.create-merge table IpInfo (IpCidr:string, Info:string)
//clear any previously ingested data if such exists
.clear table IpInfo data
.ingest into table IpInfo (@'https://kustodetectiveagency.blob.core.windows.net/kda2c4network/ip-lookup.csv.gz')
.create-merge table NetworkMetrics (Timestamp:datetime, ClientIP:string, TargetIP:string, BytesSent:long, BytesReceived:long, NewConnections:int)
.clear table NetworkMetrics data
.ingest async into table NetworkMetrics (@'https://kustodetectiveagency.blob.core.windows.net/kda2c4network/log_00000.csv.gz')
.ingest async into table NetworkMetrics (@'https://kustodetectiveagency.blob.core.windows.net/kda2c4network/log_00001.csv.gz')
// Last command is running sync, so when it finishes the data is already ingested.
// It can take about 1.5min to run.
.ingest into table NetworkMetrics (@'https://kustodetectiveagency.blob.core.windows.net/kda2c4network/log_00002.csv.gz')


//who is behind all this? 

IpInfo
| take 10 

NetworkMetrics
| take 10


// Hint 1/3
// Uncover the Hidden Trail behind this tripple threat.
// Someone managed to leak secret documents from within the network, 
// Consider the possibility of a longer preparation 
// The key to unveiling their secrets lies in understanding the signs

// Hint 2/3
// Exposing the Leaker
// Imagine a sudden downpour of tons of secret documents being leaked. 
// Analyze the patterns, spikes, or anomalies that indicate a massive influx of data. 

// Hint 3/3
// Unmasking the Cunning Intruders
// They won't rely on a single IP address to infiltrate the system.
// Look beyond and observe the changes in usage patterns across the entire attacker network.
// By analyzing the higher-level view, you can expose the intricacies & tactics.


// timeseries
// https://learn.microsoft.com/azure/data-explorer/kusto/query/aggregation-functions
// bin()
NetworkMetrics
| summarize count() by bin(Timestamp, 1d)
| render timechart


// On what day was the lowest avergage amount of data sent? 2023-06-11T00:00:00Z

// You can use time-chart to look on the data
NetworkMetrics
| summarize avg(BytesSent) by bin(Timestamp, 1d)
| render timechart

// .. or you can use query to calculate it
NetworkMetrics
| summarize avg(BytesSent) by bin(Timestamp, 1d)
| top 1 by avg_BytesSent asc


//ipv4_lookup
NetworkMetrics
| take 10
| evaluate ipv4_lookup(IpInfo, ClientIP, IpCidr)

//Which company most frequently contacted IP address 178.248.55.129?
NetworkMetrics
| where TargetIP == '178.248.55.129'
| evaluate ipv4_lookup(IpInfo, ClientIP, IpCidr)
| summarize Count=count() by Info
| order by Count


//make-series, creates arrays of agg(s) with a single row per group.
NetworkMetrics
| make-series count(), avg(BytesReceived) on Timestamp step 1d
| render timechart with (ysplit=panels)
// two seires, count & avg. 
// full list of possibilities 
// https://learn.microsoft.com/azure/data-explorer/kusto/query/time-series-analysis


// forecast distinct count of clients for an extra week.
// https://learn.microsoft.com/azure/data-explorer/kusto/query/series-decompose-forecastfunction
NetworkMetrics
| make-series Clients=dcount(ClientIP) on Timestamp to datetime(2023-07-08) step 1h
| extend forecast=series_decompose_forecast(Clients, 24*7)
| render timechart


// Recap:
// 1. Mayor is involved in a few incidents stemming from data leaks
// 2. We got information on companies working with municipality
// 2. We're asked to find based on network activity who is behind it all


// Hackers would like to minimize their network footprint, 
// so they would most probably connect to a single machine at a time.


// what machine they connecting to?
NetworkMetrics
| summarize dcount(TargetIP) by ClientIP
| where dcount_TargetIP == 1 
| distinct ClientIP
| evaluate ipv4_lookup(IpInfo, ClientIP, IpCidr)
| project ClientIP, Info


// detect anomalies where huge amounts of data were sent?
// https://learn.microsoft.com/azure/data-explorer/kusto/query/series-decompose-anomaliesfunction
let suspicious = NetworkMetrics
| summarize dcount(TargetIP) by ClientIP
| where dcount_TargetIP == 1 
| distinct ClientIP
| evaluate ipv4_lookup(IpInfo, ClientIP, IpCidr)
| project ClientIP, Info;
NetworkMetrics
| lookup kind=inner suspicious on ClientIP
| make-series BytesSent=sum(BytesSent) on Timestamp step 1d by Info
| extend (anomaly, score) = series_decompose_anomalies(BytesSent)
| mv-expand score, anomaly to typeof(int)
| where anomaly in (1,-1)
| summarize max(toreal(score)) by Info
| top 10 by max_score desc
// | extend max_score = toreal(series_stats_dynamic(score)['max'])
// | top 10 by max_score
// | render anomalychart 

// Most suspicious: KUANDA.ORG, max_score 69.2960500270368
