#connect cluster('kvc43f0ee6600e24ef2b0e.southcentralus').database('KustoDetectiveAgency')

// End Game

.execute database script <|
.create table KuandaLogs (Timestamp:datetime, DetectiveId:string, Message:string)
.ingest async into table KuandaLogs (@'https://kustodetectiveagency.blob.core.windows.net/kda2c10adminlogs/log_00000.csv.gz')
.ingest async into table KuandaLogs (@'https://kustodetectiveagency.blob.core.windows.net/kda2c10adminlogs/log_00001.csv.gz')
.ingest into table KuandaLogs (@'https://kustodetectiveagency.blob.core.windows.net/kda2c10adminlogs/log_00002.csv.gz')



// hint 1
// All traces look alike, isn't it? Or... indeed - it isn't. 
// Anything exceptional catch your eye?

// hint 2
// Did you get what are the trojan's intentions?
// The key to the solution may be spread between the lines.

// hint 3
// Can you craft your final answer so it will fall between the cracks of the Kuanda's bitter defense?


KuandaLogs
| take 1000


// partition
// https://learn.microsoft.com/azure/data-explorer/kusto/query/partitionoperator
// calc the time between events per detective.
KuandaLogs
| where DetectiveId endswith '11' // Just a sample of the data.
| partition hint.strategy=native by DetectiveId
(
    order by Timestamp asc 
    | extend Diff = Timestamp - prev(Timestamp)
)

// scan
// https://learn.microsoft.com/azure/data-explorer/kusto/query/scan-operator
// ie. find the 1st activity within 10m of login event.
KuandaLogs
| where DetectiveId endswith '11' // Just a sample of the data.
| partition hint.strategy=native by DetectiveId
(
    order by Timestamp asc 
     | scan declare(FirstActivity:string, LoginTime:datetime) with (
        step start output=none: Message has 'User entered the system' => LoginTime=Timestamp;
        step s2:
            Timestamp - start.LoginTime < 10min and Message !has 'User entered the system' 
            =>  FirstActivity = Message, LoginTime = start.LoginTime;
    )
    | project DetectiveId, LoginTime, FirstActivityTimestamp=Timestamp,  FirstActivity
)


// calc detective working 'sessions'
// a 'session' starts when user 'enters the system' or encounters a 'user session reset'
// 'session' ends after 10m pass.
KuandaLogs
| where DetectiveId endswith '11' // Just a sample of the data.
| partition hint.strategy=native by DetectiveId
(
    order by Timestamp asc 
     | scan with_match_id=id  declare(StartTime:datetime, EndTime:datetime) with (
        step start output=none: 
			Message has 'User entered the system' or Message has 'User session reset' => StartTime = Timestamp;
        step completed output=last:
			(Timestamp-start.StartTime > 10min) => 
			StartTime = start.StartTime, EndTime = Timestamp;
    )
    | order by id asc, Timestamp asc
    | extend SessionDuration = EndTime - StartTime
)
// The 'scan' operator operates by running over ordered event records (as indicated by "order by Timestamp asc") 
// and employs programmed sequence scanning logic with steps. Each step contains a predicate (condition) and 
// may include several assignments that update the 'scan's state. This state is defined using the "declare()" clause and 
// proves extremely useful for preserving calculation results and sharing them between steps. 
// It's not limited to primitive types and can include dynamic arrays and dynamic property bags as well

// Good luck, we're count()ing on you.


KuandaLogs
| where Message has 'encryption'
| parse Message with * "Operation id=" operationId:string 
| take 1000
//2023-09-12T23:53:30Z	kvc727bffe9221c465a592	Sending an encrypted message, will use Dekrypt(@'tBhku8uLuQULuDTou8udZDuduBiluQikuQiku4ERh4vV5\LEmeI9RGZYIXiCr[08ZBh[5e0e0DU6u848ZQ575DoyuXI95tyBR\16I6ijhO48ROY\0nv7I\16hO1l5[TyIP2Em\S9ROWj0tyBhO4l0KvB0tyUrtyChP2g0tA9ROJ9n[1Vme2VFXvh5GvkcnverGZgrtyChp==', strcat_array(<active-user-encryption-tokens>, '')) for decoding.

KuandaLogs
| where Message has 'decoding'
| parse Message with * "Operation id=" operationId:string 
| take 1000
// 192 rows

// kvc2ac0c1fdbe22ec157c8, 2023-09-08T02:28:30Z
// Sending an encrypted message, will use Dekrypt(@'mbNYouohoQThoQKpoQNeou5eobUqoQUYoQUYozJ\N[hO9m0T9nZbVPjvVPN5ciR4\PjqVm159mX5VPjDMENqsgX51vO3MgY5\vp5MPRb\HZhFm\D9PlCNWAOcgZbVPjvVPjbNBl3N[zSlHZYciAuVPSbMEjbNBl3NWzvMvCTNBlkVPSCNBS0cElCMnZk9mI4cD[=', strcat_array(<active-user-encryption-tokens>, '')) for decoding.

KuandaLogs
| where DetectiveId =='kvc2ac0c1fdbe22ec157c8'
| order by Timestamp asc

print Message=@"mbNYouohoQThoQKpoQNeou5eobUqoQUYoQUYozJ\N[hO9m0T9nZbVPjvVPN5ciR4\PjqVm159mX5VPjDMENqsgX51vO3MgY5\vp5MPRb\HZhFm\D9PlCNWAOcgZbVPjvVPjbNBl3N[zSlHZYciAuVPSbMEjbNBl3NWzvMvCTNBlkVPSCNBS0cElCMnZk9mI4cD[=", Key=strcat('qehswdmpvjma')
| invoke Dekrypt()

[2023-09-08T02:28:30.0000000Z] Kuanda server returned an error... Cmon, we must migrate our servers to AMD processors to avoid these system halts!


// now I need all the enkrypted messages by DetectiveId and their active keys upto the enk msg.
// partition & scan
KuandaLogs
// | where DetectiveId == "kvc2ac0c1fdbe22ec157c8"
| partition hint.strategy=native by DetectiveId
(
    order by Timestamp asc 
    | scan with_match_id = SessionId declare(StartTime:datetime, EndTime:datetime, Message: string) with (
        step start output=none:
            Message has 'User entered the system' or Message has 'User session reset' => StartTime = Timestamp;
        step collectTokens output=all:
            Timestamp > start.StartTime and Message has 'Captured user encryption token' or Message has 'token for this operation is disposed';
        step completed output=last:
            Message has 'Sending an encrypted message'
            and (Timestamp > start.StartTime) =>
            StartTime = start.StartTime, EndTime = Timestamp;
    )
    | order by SessionId asc, Timestamp asc
    | extend token = extract(@"token: '(.*)\'." , 1, Message), OperationId=extract(@"Operation id=([\w\d]*)", 1, Message)
    | summarize any(*), count() by OperationId, SessionId, DetectiveId
    | where count_ < 2
    | summarize make_list_if(any_token, isnotempty(any_token)), any(*) by SessionId, DetectiveId
    | extend Key = strcat_array(list_any_token, "")
    | extend Message = extract(@"Dekrypt\(@\'(.*)\'," , 1, any_any_Message)
)
| where any_any_Message has "Sending an encrypted message"
| invoke Dekrypt()
| project Result
// | where Result has 'BUGBUG'

[2023-09-10T02:12:30.0000000Z] TODO [BUGBUG]: Validate: bitset_count_ones(hash_many('kvc178c8b4935bed382529', tostring($user_answer))) < 54! Leaving as-is for now, the chance it will actually happen is very low. (O boy, these non-AMD processors are literally melting down on invalid instruction sets!)
[2023-09-22T03:48:30.0000000Z] TODO [BUGBUG]: Validate: bitset_count_ones(hash_many('kvc2f916b75d21076bc100', tostring($user_answer))) < 54! Leaving as-is for now, the chance it will actually happen is very low. (O boy, these non-AMD processors are literally melting down on invalid instruction sets!)

//manual
print answer=bitset_count_ones(hash_many('kvc178c8b4935bed382529', tostring(1))) < 54

print answer=bitset_count_ones(hash_many('kvc178c8b4935bed382529', tostring(1000))) >= 54


//brute force integers, till count >= 54
range answer from 0 to 2000000000 step 1
| extend result = bitset_count_ones(hash_many('kvc43f0ee6600e24ef2b0e.southcentralus.kusto.windows.net', tostring(answer)))
| where result >= 54
| project answer, result
| take 10
//76423587
