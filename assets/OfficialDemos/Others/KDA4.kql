
// El Puente

// grab primes

https://kustodetectiveagency.blob.core.windows.net/prime-numbers/prime-numbers.csv.gz

// Create table command
////////////////////////////////////////////////////////////
.create table ['primes']  (['num']:long)

// Create mapping command
////////////////////////////////////////////////////////////
.create table ['primes'] ingestion csv mapping 'primes_mapping' '[{"column":"num", "Properties":{"Ordinal":"0"}}]'

// Ingest data into table command
///////////////////////////////////////////////////////////
.ingest into table ['primes'] 
(h'https://kustodetectiveagency.blob.core.windows.net/prime-numbers/prime-numbers.csv.gz') 
with (
    format='csv',
    ingestionMappingReference='primes_mapping',
    ingestionMappingType='csv',
    ignoreFirstRecord=false
    )

primes
| count

//find https://aka.ms/{Largest special prime under 100M}

// hint 1:
// For finding special prime-numbers, you may look on the previous rows using prev()/next() functions. 
// Just make sure to sort (use `sort` operator) data before using it.


// the sum of 2 prime neighbors +1 = special, ie. 13 is special because (5 + 7 + 1)

primes 
| sort by num 
| extend j = prev(num)
| extend special = (num+j)+1
| join kind = inner primes on $left.special == $right.num
| sort by num1 
| where num1 < 100000000
| summarize lsp=max(num1)
| project strcat('https://aka.ms/',lsp)

// wrong
primes 
| sort by num 
| extend j = prev(num)
| extend special = (num+j)+1
| where special == num  //this is same as join but will never be true on the same table.
| where special < 100000000 
| summarize lsp=max(special)



// PART 2
// Well done, my friend.
// It's time to meet. Let's go for a virtual sTREEt tour...
// Across the Big Apple city, there is a special place with Turkish Hazelnut and four Schubert Chokecherries within 66-meters radius area.
// Go 'out' and look for me there, near the smallest American Linden tree (within the same area).
// Find me and the bottom line: my key message to you.

// Cheers,
// El Puente.

// PS: You know what to do with the following.

----------------------------------------------------------------------------------------------

.drop table nyc_trees ifexists 

.execute database script <|
// The data below is from https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh 
// The size of the tree can be derived using 'tree_dbh' (tree diameter) column.
.create-merge table nyc_trees 
       (tree_id:int, block_id:int, created_at:datetime, tree_dbh:int, stump_diam:int, 
curb_loc:string, status:string, health:string, spc_latin:string, spc_common:string, steward:string,
guards:string, sidewalk:string, user_type:string, problems:string, root_stone:string, root_grate:string,
root_other:string, trunk_wire:string, trnk_light:string, trnk_other:string, brch_light:string, brch_shoe:string,
brch_other:string, address:string, postcode:int, zip_city:string, community_board:int, borocode:int, borough:string,
cncldist:int, st_assem:int, st_senate:int, nta:string, nta_name:string, boro_ct:string, ['state']:string,
latitude:real, longitude:real, x_sp:real, y_sp:real, council_district:int, census_tract:int, ['bin']:int, bbl:long)
with (docstring = "2015 NYC Tree Census")
.ingest  into table nyc_trees ('https://kustodetectiveagency.blob.core.windows.net/el-puente/1.csv.gz')
.ingest  into table nyc_trees ('https://kustodetectiveagency.blob.core.windows.net/el-puente/2.csv.gz')
.ingest  into table nyc_trees ('https://kustodetectiveagency.blob.core.windows.net/el-puente/3.csv.gz')
// Get a virtual tour link with Latitude/Longitude coordinates
.create-or-alter function with (docstring = "Virtual tour starts here", skipvalidation = "true") VirtualTourLink(lat:real, lon:real) { 
	print Link=strcat('https://www.google.com/maps/@', lat, ',', lon, ',4a,75y,32.0h,79.0t/data=!3m7!1e1!3m5!1s-1P!2e0!5s20191101T000000!7i16384!8i8192')
}
// Decrypt message helper function. Usage: print Message=Decrypt(message, key)
.create-or-alter function with 
  (docstring = "Use this function to decrypt messages")
  Decrypt(_message:string, _key:string) { 
    let S = (_key:string) {let r = array_concat(range(48, 57, 1), range(65, 92, 1), range(97, 122, 1)); 
    toscalar(print l=r, key=to_utf8(hash_sha256(_key)) | mv-expand l to typeof(int), key to typeof(int) | order by key asc | summarize make_string(make_list(l)))};
    let cypher1 = S(tolower(_key)); let cypher2 = S(toupper(_key)); coalesce(base64_decode_tostring(translate(cypher1, cypher2, _message)), "Failure: wrong key")
}


nyc_trees | count

nyc_trees | take 10

// 20INznpGzmkmK2NlZ0JILtO4OoYhOoYUB0OrOoTl5mJ3KgXrB0[8LTSSXUYhzUY8vmkyKUYevUYrDgYNK07yaf7soC3kKgMlOtHkLt[kZEclBtkyOoYwvtJGK2YevUY[v65iLtkeLEOhvtNlBtpizoY[v65yLdOkLEOhvtNlDn5lB07lOtJIDmllzmJ4vf7soCpiLdYIK0[eK27soleqO6keDpYp2CeH5d\F\fN6aQT6aQL[aQcUaQc[aQ57aQ5[aQDG

// Hints 
// Geo-hashing fun fact: H3 cell with size of 10 is about 66m in radius.
// Sometimes, catchy phrase is a key for a successful song too.

nyc_trees
| extend VirtualTourLink (lat==latitude, lon==longitude)

nyc_trees | take 1 | project latitude, longitude

VirtualTourLink(40.61428332, -73.93259204)


// I need to find 1 Turkish Hazelnut and 4 Schubert Chokecherries within an h3 cell...
// and within the same area find the smallest American Linden


nyc_trees
| where spc_common has "'Schubert' chokecherry"
| summarize arg_max(spc_common, created_at), count()

nyc_trees
// | where spc_common in ('American linden', 'Turkish hazelnut', "'Schubert' chokecherry")
| where spc_common in ("'Schubert' chokecherry")
| summarize c = count(),                                        
            s = make_list(spc_common)                      
            by h3cell = geo_point_to_h3cell(longitude, latitude, 10) 
| where c ==4


let a =
nyc_trees
| where spc_common in ('American linden', 'Turkish hazelnut')
| summarize c = count(),                                        
            s = make_list(spc_common)                      
            by h3cell = geo_point_to_h3cell(longitude, latitude, 10) 
| where c > 2 and s has 'American linden' and s has 'Turkish hazelnut'
;
let b = nyc_trees
| where spc_common in ("'Schubert' chokecherry")
| summarize c = count(),                                        
            s = make_list(spc_common)                      
            by h3cell = geo_point_to_h3cell(longitude, latitude, 10) 
| where c ==4;
a | join kind = inner  b on h3cell
| project h3cell


// https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/geo-h3cell-to-central-point-function

print h3cell = geo_h3cell_to_central_point("8a2a100dec9ffff")

{"type":"Point","coordinates":["-73.964108542950413","40.712746593897954"]}

nyc_trees
| extend MyCell = geo_point_to_h3cell(longitude, latitude, 10) //you have to extend so you dont loose the other columns
| where MyCell =='8a2a100dec9ffff'
| order by spc_common
| where spc_common has 'linden'
// | summarize arg_min(tree_dbh,spc_common) //3
| where tree_dbh == 3
| project latitude,longitude



VirtualTourLink(40.71222313,-73.96452201)

let msg='20INznpGzmkmK2NlZ0JILtO4OoYhOoYUB0OrOoTl5mJ3KgXrB0[8LTSSXUYhzUY8vmkyKUYevUYrDgYNK07yaf7soC3kKgMlOtHkLt[kZEclBtkyOoYwvtJGK2YevUY[v65iLtkeLEOhvtNlBtpizoY[v65yLdOkLEOhvtNlDn5lB07lOtJIDmllzmJ4vf7soCpiLdYIK0[eK27soleqO6keDpYp2CeH5d\\F\\fN6aQT6aQL[aQcUaQc[aQ57aQ5[aQDG';
print meaning=Decrypt(msg, 'ASHES to ASHES');

//Impressive, you got it right! Something BIG is going to happen...
Keep the next hint close to you, it will help you. We will be in touch soon.
El Puente.

wytaPUJM!PS:2,7,17,29,42,49,58,59,63