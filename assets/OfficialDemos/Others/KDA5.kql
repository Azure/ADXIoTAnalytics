// El Puente strikes again

// THE BIG HEIST

// Hello. It's going to happen soon: a big heist. You can stop it if you are quick enough. Find the exact place and time it's going to happen.
// Do it right, and you will be rewarded, do it wrong, and you will miss your chance.

// Here are some pieces of the information:
// The heist team has 4 members. They are very careful, hide well with minimal interaction with the external world. 
// Yet, they use public chat-server for their syncs. The data below was captured from the chat-server: 
// it doesn't include messages, but still it may be useful. See what you can do to find the IPs the gang uses to communicate.
// Once you have their IPs, use my small utility to sneak into their machine's and find more hints:
// https://sneakinto.z13.web.core.windows.net/<ip>

// Cheers
// El Puente

// PS:
// Feeling uncomfortable and wondering about an elephant in the room: why would I help you?
// Nothing escapes you, ha?
// Let's put it this way: we live in a circus full of competition. I can use some of your help, and nothing breaks if you use mine... 
// You see, everything is about symbiosis.
// Anyway, what do you have to lose? Look on an illustrated past, fast forward N days and realize the future is here.

.execute database script <|
.create-merge table ChatLogs (Timestamp:datetime, Message:string)  
.ingest into table ChatLogs ('https://kustodetectiveagency.blob.core.windows.net/digitown-chat/log_00000.csv.gz')
.ingest into table ChatLogs ('https://kustodetectiveagency.blob.core.windows.net/digitown-chat/log_00001.csv.gz')

// What is the exact place and time? Date, Longitude, Latitude

// KEY:
// There are 4 gang members planning a big heist
// We are given only with the metadata of chat activities
// We can hack by IP with https://sneakinto.z13.web.core.windows.net/<ip>

// Gang members would like to minimize their digital footprint, so probably would not log to other channels
// Gang members would have dedicated time to communicate, for syncs

ChatLogs
| take 10

// has Timestamp, Message

// A user logs in: user ID, IP address
// A user joins channel: user ID, channel ID
// A user sends a message: Sender User ID, Receiver User ID.
// A user leavs channel: user ID, channel ID
// A user logs out: user ID
// So let's find channels that users joined only them, and not other channels

// parse-where, filter messages user joins a channel, group by a user and filter those unique channels by user.
// https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/parsewhereoperator

ChatLogs
| parse-where Message with "User '" user_join "' joined the channel '" channel "'"
| summarize user_channels = make_set(channel) by user_join
| where array_length(user_channels) == 1
| extend channel = tostring(user_channels[0])
| distinct channel

// count is too much
// let's see which channels have a matching hour joining
// group by channel where all users join at same timeBooks

let user_unique_channels = ChatLogs
| parse-where Message with "User '" user_join "' joined the channel '" channel "'"
| summarize user_channels = make_set(channel) by user_join
| where array_length(user_channels) == 1
| extend channel = tostring(user_channels[0])
| distinct channel;
ChatLogs
| parse-where Message with "User '" user_join "' joined the channel '" channel "'"
| where channel in (user_unique_channels)
| extend hour = hourofday(Timestamp)
| summarize hours_of_joining = make_set(hour) by channel
| where array_length(hours_of_joining) == 1
| distinct channel

// hmm 6, we're close. 
// but we know there's 4 gang members.

ChatLogs
| parse-where Message with "User '" user "' joined the channel '" channel "'"
| where channel in ("c404fcccc82", "cf053de3c7b", "c8b204b7871", "c6d8260e867", "c2174302b54", "c5cac5f6ae9")
| summarize users_in_channel = count() by channel, bin(Timestamp, 1h)
| where users_in_channel == 4
| distinct channel

// cf053de3c7b suspecious!!
// lets get them.

// ip
let gang_members = 
ChatLogs
| parse-where Message with "User '" user_join "' joined the channel '" channel "'"
| where channel == "cf053de3c7b"
| distinct user_join;
ChatLogs
| parse-where Message with "User '" user_login "' logged in from '" ip "'"
| where user_login in (gang_members)
| distinct ip
| order by ip asc
| project strcat('https://sneakinto.z13.web.core.windows.net/',ip) 


// 119.10.30.154
// 146.49.19.37
// 194.243.69.176
// 236.48.237.42

// lets hack their machines. https://sneakinto.z13.web.core.windows.net/

// Project Natick. Microsoft's Innovative Project Natick is a research project that seeks to understand the 
// benefits and difficulties in deploying subsea data centers worldwide. 
// This research project was created to determine the reliability of underwater data centers powered by offshore renewable energy.

// they're planning to hack the datacenter!!! https://sneakinto.z13.web.core.windows.net/119.10.30.154/big-data-overview.mp4

// found thier utils https://sneakinto.z13.web.core.windows.net/194.243.69.176/utils.txt

// 1) Utility to discover secondary messages.
// Usage: ReadMessage(Message, Key)
let ReadMessage = (Message:string, Key:string) 
{
    let m = Message; let K = Key; let l = toscalar(print s = split(split(K,':')[1], ',') | mv-expand s | summarize make_list(tolong(s)));
    let ma = (i1:long, i2:long) { make_string(repeat(tolong(l[i1])-tolong(l[i2]), 1))}; 
    let ms = (d:dynamic, s:long, e:long) { make_string(array_slice(d, s, e)) };   
    let mc = m has '...';
    print s=split(split(replace_regex(m, @'[\s\?]+', ' '),substring(K,9,3))[1], ' ')
    | mv-expand with_itemindex=r s to typeof(string) | serialize 
    | where r in (l)
    | extend s = iif(r-1 == prev(r), replace_string(strcat(prev(s), s),'o','ou'), s)
    | where (r+1 != next(r))
    | summarize s=strcat_array(make_list(s), iff(mc, '+%2B', ' '))
    | extend k = series_subtract(series_add(to_utf8(K), l), repeat(23, 10))
    | project result=iif(mc, strcat(ms(k,0,3), ma(8,2), ms(k,4,6), ms(l,8,8), ms(k,7,7), ma(8,0), s), s)
};
ReadMessage(
```
Hi there! How are you?

PS: 
This is a nice utility that reveals what hidden messages the text may have.
We may read the message and think: is there anything beyond words?
Can we find it without the utility, or it will become too much of a headache?
```,
h@'dhkl4fva!that:2,9,15,22,31'
)


// 2) Get GEO location from images:
// Use https://tool.geoimgr.com/


// another message with date https://sneakinto.z13.web.core.windows.net/119.10.30.154/message-project-x.png

// We need 2 dates (Date1 & YYYY). 1st when picture taken and 2nd historical year from elephant illustration.

// marked pdf page 3 on 2022-10-01 22:38:19 https://sneakinto.z13.web.core.windows.net/236.48.237.42/project-x.pdf
// see date taken 7/9/2020 1:58pm in file property details https://sneakinto.z13.web.core.windows.net/146.49.19.37/image3.jpg, 

// 1) Utility to discover secondary messages.
// Usage: ReadMessage(Message, Key)
let ReadMessage = (Message:string, Key:string) 
{
    let m = Message; let K = Key; let l = toscalar(print s = split(split(K,':')[1], ',') | mv-expand s | summarize make_list(tolong(s)));
    let ma = (i1:long, i2:long) { make_string(repeat(tolong(l[i1])-tolong(l[i2]), 1))}; 
    let ms = (d:dynamic, s:long, e:long) { make_string(array_slice(d, s, e)) };   
    let mc = m has '...';
    print s=split(split(replace_regex(m, @'[\s\?]+', ' '),substring(K,9,3))[1], ' ')
    | mv-expand with_itemindex=r s to typeof(string) | serialize 
    | where r in (l)
    | extend s = iif(r-1 == prev(r), replace_string(strcat(prev(s), s),'o','ou'), s)
    | where (r+1 != next(r))
    | summarize s=strcat_array(make_list(s), iff(mc, '+%2B', ' '))
    | extend k = series_subtract(series_add(to_utf8(K), l), repeat(23, 10))
    | project result=iif(mc, strcat(ms(k,0,3), ma(8,2), ms(k,4,6), ms(l,8,8), ms(k,7,7), ma(8,0), s), s)
};
// bing.com?q=uncomfortable+%2Belephant+%2Bescapes+%2Bcircus+%2Bbreaks+%2Beverything+%2Btoulouse+%2Billustrated
ReadMessage(
Message=
```
PS:
Feeling uncomfortable and wondering about an elephant in the room: why would I help you?
Nothing escapes you, ha?
Let"s put it this way: we live in a circus full of competition. I can use some of your help, and nothing breaks if you use mine... You see, everything is about symbiosis.
Anyway, what do you have to lose? Look on an illustrated past, fast forward N days and realize the future is here.
)
```,
Key="wytaPUJM!PS:2,7,17,29,42,49,58,59,63");

// Nov 14, 1891


let Date1 = datetime(2020-07-09 13:58);
let YYYY  = 1891;
print (Date1 + ((YYYY % 1000) * 1d))
// datetime(2022-12-17 13:58:00.0000000)

// We know when, but where?
// We need to find the place of the heist, lets try https://tool.geoimgr.com/

// 58.9688665166667,-3.38010413333333